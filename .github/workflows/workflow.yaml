name: Deploy EKS Cluster

on:
  push:
    branches:
      - aws # Or your desired branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest # Or specify a version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}          
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-eks
          role-session-name: GitHubActionSession
          aws-region: eu-west-1

      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: terraform/eks

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/eks

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform/eks
        continue-on-error: true # Allows plan to complete even if errors are found, so the output can be reviewed

      - name: Terraform Plan Output
        if: ${{ failure() && steps['Terraform Plan'].outcome == 'failure' }}
        run: exit 1 # Fail the workflow if terraform plan fails.

      - name: Terraform Apply (Main)
        run: terraform apply -auto-approve
        working-directory: terraform/aws

      - name: Extract Cluster Name
        id: extract-cluster-name
        run: |
          echo "::set-output name=cluster_name::$(terraform output -raw cluster_name)"
        working-directory: terraform/aws

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ steps.extract-cluster-name.outputs.cluster_name }} --region eu-west-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Verify kubectl connection
        run: kubectl get nodes
